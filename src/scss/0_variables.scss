@import url('https://fonts.googleapis.com/css?family=Lato&display=swap');
@import url('https://fonts.googleapis.com/css?family=Source+Sans+Pro&display=swap');
@import url('https://fonts.googleapis.com/css?family=Raleway&display=swap');
// var(--primary-color): #0984e3;
// var(--secondary-color): #b2bec3;
// var(--bgc) : #fff;
// $text-primary:black;
$pro : 'Source Sans Pro', sans-serif;
$col-accent: #FFF;
$col-primary: #f72f4e;
$col-dark: #140228;
$formElements: 5;
$font-stack: Roboto, sans-serif;
$easer: cubic-bezier(0.4, 0, 0.2, 1);
$raleway: 'Raleway', sans-serif;

:root{
  --primary-color: #0984e3;
  --secondary-color: #b2bec3;
  --bgc: #28293D ;
  --card-bg: #fff;
  --text-color: #fff;
  --font-color: #424242;
  --bg-color: #fff;
  --heading-color: #292922;
  --raleway: 'Raleway', sans-serif;

}



.primary-text{
  color:var(--primary-color);
  font-weight: bold;
}
// mixins
@mixin easeIn {
  transition: all 0.2s ease-in;
}


// Color Function

@function color_match($color) {
  @if lightness($color) > 65% {
    @return #000000
  } @else {
    @return #ffffff;
  }

}

// Responve Mixings

$phone : '(max-width: 480px)';
$tablet-p: '(max-width: 767px)';
$tablet-l: '(min-width: 768px) and (max-width: 979px)';
$l: '(max-width: 1270px)';
$xl: '(min-width: 1329px)';
$non-retina: 'screen and (-webkit-max-device-pixel-ratio: 1)';
$retina: '(min--moz-device-pixel-ratio: 1.5),
					(-o-min-device-pixel-ratio: 3/2),
					(-webkit-min-device-pixel-ratio: 1.5),
					(min-device-pixel-ratio: 1.5),
					(min-resolution: 144dpi),
					(min-resolution: 1.5dppx)';


@mixin media($min, $max, $type: false) {

  @if $type == 'true' {
    @media only screen and (min-width: #{$min}) and (max-width: #{$max}) {
      @content;
    }
  }

  @if $max != null {
    @media only screen and (max-width: $max) {
      @content;
    }
  }
  @if $min != null {
    @media only screen and (min-width: $min) {
      @content;
    }
  }
}

// @mixin respond-above($breakpoint) {

//   // If the breakpoint exists in the map.
//   @if map-has-key($breakpoints, $breakpoint) {

//     // Get the breakpoint value.
//     $breakpoint-value: map-get($breakpoints, $breakpoint);

//     // Write the media query.
//     @media (min-width: $breakpoint-value) {
//       @content;
//     }

//   // If the breakpoint doesn't exist in the map.
//   } @else {

//     // Log a warning.
//     @warn 'Invalid breakpoint: #{$breakpoint}.';
//   }
// }


.p-ab{
  position: absolute;
}

.p-re{
  position: relative;
}

.b-0{
  bottom: 0;
}
